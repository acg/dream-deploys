#!/usr/bin/env python3
'''
A barebones HTTP server that calls accept(2) on a stdin listen socket.
'''

import socket, signal, errno, os, sys, re

got_sighup = False

def main():
  htdocs = sys.argv[1]
  signal.signal(signal.SIGHUP, signal_handler)
  s = socket.fromfd(0, socket.AF_INET, socket.SOCK_STREAM)
  count = 1
  print('worker %d' % os.getpid(), file=sys.stderr)
  while not got_sighup:
    # Accept a client connection and read an HTTP request.
    try:
      c, addr = s.accept()
    except socket.error as e:
      if e.errno == errno.EINTR or e.errno == errno.EAGAIN:
        continue
      else:
        raise
    print('worker %d request %d' % (os.getpid(),count), file=sys.stderr)
    count += 1
    # Note: retrying a read interrupted by a signal is
    # typically more subtle than this example.
    req = b''
    while not req:
      try:
        req += c.recv(4096)
      except socket.error as e:
        if e.errno == errno.EINTR or e.errno == errno.EAGAIN:
          continue
    # Generate an HTTP response and write it back.
    m = re.compile(r'^GET (\S+) HTTP/1.1\r?\n').match(req.decode())
    path = htdocs+'/'+m.group(1).lstrip('/') if m else None
    if path:
      try:
        rsp = b'HTTP/1.1 200 OK\r\n\r\n'+open(path, 'rb').read()
      except IOError as e:
        if e.errno == errno.ENOENT:
          rsp = b'HTTP/1.1 404 Not Found\r\n\r\n'
        elif e.errno == errno.EACCES:
          rsp = b'HTTP/1.1 403 Forbidden\r\n\r\n'
        else:
          raise
    else:
      rsp = b'HTTP/1.1 501 Not Implemented\r\n\r\n'
    c.send(rsp)
    c.close()
  return 0

def signal_handler(signum, frame):
  global got_sighup
  got_sighup = (signum == signal.SIGHUP)

if __name__ == '__main__':
  exit(main())

